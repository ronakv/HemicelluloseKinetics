import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt





def HCkinetics(c, t, p):
    """
    Defines the differential equations for the kinetics of the hemicellulose
    extraction system.

    Arguments:
        c :  vector of the concentrations:
                  w = [c1,c2,c3,c4, c5, c6, c7, c8]
        t :  time
        p :  vector of the parameters:
                  p = [k1, k2, k3, k4]
    """
    c1, c2, c3, c4, c5, c6, c7, c8 = c
    k1, k2, k3 , k4 = p

    
    # kinetics from the appendix to dr chens paper
    
    f = [k4*c2,                                                        #dc1/dt
         -k4*c2 + k1*(2**k2)*c3 + (1/6)*k3*c8,                         #dc2/dt
         -k1*(2**k2)*c3 + k1*(3**k2)*c4 + k1*(4**k2)*c5 + (1/6)*k3*c8, #dc3/dt
         -k1*(3**k2)*c4 + k1*(5**k2)*c6 + k1*(6**k2)*c7 + (1/6)*k3*c8, #dc4/dt
         -k1*(4**k2)*c5 + (1/6)*k3*c8,                                 #dc5/dt
         -k1*(5**k2)*c6 + (1/6)*k3*c8,                                 #dc6/dt
         -k1*(6**k2)*c7 + (1/6)*k3*c8,                                 #dc7/dt
         -k3*c8                                                        #dc8/dt
         ]
    
    return f



# ODE solver parameters
abserr = 1.0e-8
relerr = 1.0e-6
stoptime = 10.0
numPoints = 10000


k1 = 1.26*10**(-2)
k2 = 0.65
k3 = 4.61*10**(-2)
k4 = 3.60*10**(-4)

# Pack up the parameters and initial conditions:
k = [k1, k2, k3, k4]

c1_0 = 0
c2_0 = 0
c3_0 = 0
c4_0 = 0
c5_0 = 0
c6_0 = 0
c7_0 = 0
c8_0 = 1





# Call the ODE solver.

def func(tau):
    
    # time array
    numPoints = 10000
    t = np.linspace(0, tau, numPoints)
    
    # initial concentrations
    
    c0 = [c1_0, c2_0, c3_0, c4_0, c5_0, c6_0, c7_0, c8_0]
    
    
    # reactor 1
    
    pass1 = odeint(HCkinetics, c0, t, args=(k,),
                  atol=abserr, rtol=relerr)
    
    # concentrations at end of reactor 1 => only c8 going to reactor 2 all
    # others in hydrolystae stream (i.e. c1_0 .. c7_0 = 0)
    
    c0 = [c1_0, c2_0, c3_0, c4_0, c5_0, c6_0, c7_0, pass1[numPoints - 1][7]]
    
    # reactor 2 simulation
    
    pass2 = odeint(HCkinetics, c0, t, args=(k,),
                  atol=abserr, rtol=relerr)
    
    # concentrations at end of reactor 2 => only c8 going to reactor 3 all
    # others in hydrolystae stream
    
    c0 = [c1_0, c2_0, c3_0, c4_0, c5_0, c6_0, c7_0, pass2[numPoints - 1][7]]
    
    # reactor 3
    
    pass3 = odeint(HCkinetics, c0, t, args=(k,),
                  atol=abserr, rtol=relerr)
    
    
    # concentrations at end of reactor 3 => only c8 going to reactor 4 all
    # others in hydrolystae stream 
    
    c0 = [c1_0, c2_0, c3_0, c4_0, c5_0, c6_0, c7_0, pass3[numPoints - 1][7]]
    
    # reactor 4
    
    pass4 = odeint(HCkinetics, c0, t, args=(k,),
                  atol=abserr, rtol=relerr)
    
    # concentrations at end of reactor 4 => only c8 going to reactor 5 all
    # others in hydrolystae stream 
    
    c0 = [c1_0, c2_0, c3_0, c4_0, c5_0, c6_0, c7_0, pass4[numPoints - 1][7]]
    
    # reactor 5
    
    pass5 = odeint(HCkinetics, c0, t, args=(k,),
                  atol=abserr, rtol=relerr)
    
    # summing DP 101 - 120 from all reactors
    
    dp110 = pass1[numPoints - 1][6] + pass2[numPoints - 1][6]
    + pass3[numPoints - 1][6] + pass4[numPoints - 1][6] 
    + pass5[numPoints - 1][6]
    
    # summing DP 81 -100 from all reactors
    
    dp90 = pass1[numPoints - 1][5] + pass2[numPoints - 1][5] 
    + pass3[numPoints - 1][5] + pass4[numPoints - 1][5] 
    + pass5[numPoints - 1][5]
    
    # summing DP 61 - 80 from all reactors
    
    dp70 = pass1[numPoints - 1][4] + pass2[numPoints - 1][4] 
    + pass3[numPoints - 1][4] + pass4[numPoints - 1][4] 
    + pass5[numPoints - 1][4]
    
    # summing DP 41 - 60 from all reactors
    
    dp50 = pass1[numPoints - 1][3] + pass2[numPoints - 1][3]
    + pass3[numPoints - 1][3] + pass4[numPoints - 1][3] 
    + pass5[numPoints - 1][3]
    
    # total long chain (DP: 41 - 120) HC produced
    
    totalLongChain = dp110 + dp90 +dp70 + dp50
    
    # conversion = high MW HC/ HC used
    
    conversion = totalLongChain/(1 - pass5[numPoints - 1][7])
    
    return conversion


# This section plots conversion as a function of residence time at 180C
    
# array of residence times
    
taus = np.linspace(0, 12, 100)

# creating the conversion placeholder array

conversion = np.zeros_like(taus)

# plotting 

i = 0
for tau in taus:
    conversion[i] = func(tau)
    i = i+ 1

plt.plot(taus, conversion)
plt.xlabel('Residence time')
plt.ylabel('kg High MW molecular HC produced/kg of hemicellulose solubilized')





